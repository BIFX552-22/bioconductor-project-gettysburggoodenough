---
title: "Bioconductor Project"
author: Hannah Hellmuth and Lindsey Ukishima
format: html
editor: visual
---

# Workflow: generegulation

Citation: Bioconductor Package Maintainer (2022). *generegulation: Finding Candidate Binding Sites for Known Transcription Factors via Sequence Matching*. R package version 1.23.0, <https://www.bioconductor.org/help/workflows/generegulation/>.

#### Finding Candidate Binding Sites for Known Transcription Factors via Sequence Matching

The binding of transcription factor proteins (TFs) to DNA promoter regions upstream of gene transcription start sites (TSSs) is one of the most important mechanisms by which gene expression, and thus many cellular processes, are controlled. Though in recent years many new kinds of data have become available for identifying transcription factor binding sites (TFBSs) \-- ChIP-seq and DNase I hypersensitivity regions among them \-- sequence matching continues to play an important role. In this workflow we demonstrate Bioconductor techniques for finding candidate TF binding sites in DNA sequence using the model organism Saccharomyces cerevisiae. The methods demonstrated here apply equally well to other organisms.

### Installing the Package

(For R version 4.2)

```{r}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("generegulation")


BiocManager::install(c("MotifDb",  "GenomicFeatures", 
           "TxDb.Scerevisiae.UCSC.sacCer3.sgdGene",
           "org.Sc.sgd.db", "BSgenome.Scerevisiae.UCSC.sacCer3",
           "motifStack", "seqLogo"))
```

```{r}
library(BiocManager)
library(generegulation)
library(MotifDb)
library(S4Vectors)
library(seqLogo)
library(motifStack)
library(Biostrings)
library(GenomicFeatures)
library(org.Sc.sgd.db)
library(BSgenome.Scerevisiae.UCSC.sacCer3)
library(TxDb.Scerevisiae.UCSC.sacCer3.sgdGene)
```

### Documentation

```{r}

browseVignettes("generegulation")
```

### Data

This workflow is looking at a set of seven widely co-expressed and highly correlated Saccharomyces cerevisiae genes: DAL1, DAL2, DAL4, DAL5, DAL7, DAL80, and GAP1. These seven genes have been found to be correlated with Nitrogen Catabolite Repression (NCR) which is the way yeast cells switch between using rich nitrogen sources and poor nitrogen sources. The data used in this workflow comes from [Allocco et al](http://www.biomedcentral.com/1471-2105/5/18), 2004, "Quantifying the relationship between co-expression, co-regulation and gene function", which looks at the gene expression across 200 conditions.

### Workflow

Packages in this workflow:

-   MotifDb - provides numeric matrices of DNA-binding sequences which are accompanied by information about the matrix.

-   S4Vectors - allows you to represent vector-like or list-like objects as S4 objects

-   seqLogo - creates a visual representation of sequence alignments. The height of the stack at each position represents the amount of content and the of each letter represents the frequency of the amino or nucleic acid.

-   motifStack - allows you to visually represent the alignment of multiple sequence motifs

-   Biostrings - contains multiple functions that allow for manipulation of a large sequence or sets of sequences

-   GenomicFeatures - retrieves information about a transcript from USCS Genome Browser and BioMart databases

-   org.Sc.sgd.db - annotated information about Saccharomyces cerevisiae genome

-   BSgenome.Scerevisiae.UCSC.sacCer3 - full Saccharomyces cerevisiae genome from USCS stored as Biostring objects

-   TxDb.Scerevisiae.UCSC.sacCer3.sgdGene - loads the Saccharomyces cerevisiae genome as TxDb objects

### Methods

<<<<<<< HEAD
-   Overview of the analysis methods - "What" did you do?

-   Tools that you used (programs, packages, etc\...) - "How" did you do it?

-   Take home highlights - "Why" did you do it that way?

### Results

-   What interesting things did you learn from the data?

### Conclusion
=======
##### Minimal Example

Query function is a general search tool that returns matrices whose metadata in any column is matched by the query string (`?query`).

`MotifDb` is "an annotated collection of DNA-binding sequence motifs" containing about "2000 position frequency matrices (pfm) collected from public sources, with accompanying metadata and search and export capabilities." The matrices are gathered from six public sources - FlyFactorSurvey, hPDI, JASPAR_CORE, jolma2013, ScerTF, stamlab, UniPROBE, and cisbp 1.02 - for five organisms: hsapiens, Dmelanogaster, Scerevisiae, Mmusculus, Athaliana, Celegans, and other.

Note that some of the extracted rows were modified from the source code because the source information has been updated (March 2022) since the code was published (October 2017).

This minimal example seeks to find matches for the JASPAR DAL80 motif in the DAL1 promoter.
>>>>>>> main

-   What interesting things / skills did you learn?

-   What challenges did you come across?

```{r}
query(MotifDb, "DAL80") 
```

To visualize the frequency of the bases at, the `seqLogo` function is used.

```{r}
pfm.dal80.jaspar <- query(MotifDb,"DAL80")[[1]]
seqLogo(pfm.dal80.jaspar)
```

The `transcriptsBy` function is used to extract genomic features of a given type grouped based on some other genomic feature. In this example, it takes a TxDb obeject (TxDb class is used to store transcript annotations), and groups it by gene.

The `getpromoterSeq` function is used to search for the promoter in the upstream region. The PCM variable indicates the percentage of each base in the region. `matchPWM` creates a position weight matrix taking the PCM variable as the weight matrix, the promoter region as the subject sequence, and the `min.score` of 90% - which is the minimum score for counting a match. The final output includes the subject sequence and the locations of the query sequence.

```{r}
dal1 <- "YIR027C"
chromosomal.loc <- 
  transcriptsBy(TxDb.Scerevisiae.UCSC.sacCer3.sgdGene, by="gene") [dal1]
promoter.dal1 <- 
  getPromoterSeq(chromosomal.loc, Scerevisiae, upstream=1000, downstream=0)
pcm.dal80.jaspar <- round(100 * pfm.dal80.jaspar)
matchPWM(pcm.dal80.jaspar, unlist(promoter.dal1)[[1]], "90%")
```

##### Extended Example

In the extended example, they start by searching the MotifDb for the DAL80 motif, then assigns a variable to the motif extracted from the JASPAR source and to the ScerTF source.

```{r}
<<<<<<< HEAD
dal80.jaspar <- query(MotifDb,"DAL80")[[5]]
dal80.scertf <-query(MotifDb,"DAL80")[[6]]
seqLogo(dal80.jaspar)
=======
dal80.jaspar <- query(MotifDb,"DAL80")[[1]]
dal80.scertf <-query(MotifDb,"DAL80")[[6]]
```

How do these two motifs compare to each other? The seqLogo function can once again be used to visualize the regions, but only one graph can be created at a time.

```{r}
seqLogo(dal80.jaspar)
```

```{r}
>>>>>>> main
seqLogo(dal80.scertf)
```

With some manipulation using the motifStack package, these motifs can be viewed in the same figure.

```{r}
<<<<<<< HEAD
pfm.dal80.jaspar <- new("pfm", mat=query(MotifDb, "dal80")[[5]], 
                    name="DAL80-JASPAR")
=======
pfm.dal80.jaspar <- new("pfm", mat=query(MotifDb, "dal80")[[1]], 
                        name="DAL80-JASPAR")
>>>>>>> main
pfm.dal80.scertf <- new("pfm", mat=query(MotifDb, "dal80")[[6]], 
                    name="DAL80-ScerTF")
plotMotifLogoStack(DNAmotifAlignment(c(pfm.dal80.scertf, pfm.dal80.jaspar)))
```

Of these two, the JASPAR motif has more detail, but the ScerTF motif is more recently published. ScerTF has a reputation for careful yeast-specific curation. The scientists chose to use the ScerTF motif.

Georis et al mention that DAL80 \"competes with Gat1 for binding\" -- suggesting that they would have highly similar motifs. MotifDb has 3 entries for GAT1:

```{r}
query(MotifDb, "gat1")
```

We can plot all three together to visualize the differences of the GAT1 motif between different sources.

```{r}
query(MotifDb, "gat1")

pfm.gat1.jaspar = new("pfm", mat=query(MotifDb, "gat1")[[5]], 
                       name="GAT1-JASPAR")
pfm.gat1.scertf = new("pfm", mat=query(MotifDb, "gat1")[[6]], 
                       name="GAT1-ScerTF")
pfm.gat1.uniprobe = new("pfm", mat=query(MotifDb, "gat1")[[7]], 
                       name="GAT1-UniPROBE")
plotMotifLogoStack(c(pfm.gat1.uniprobe, pfm.gat1.scertf, pfm.gat1.jaspar))
```

It appears that Georis' claim is correct that DAL80 and GAT1 could compete for binding since the GAT1-JASPAR motif is similar to the DAL80 motif of **GATAA**. However, we can also see that the GAT1-ScerTF and GAT1-UniPROBE motifs differ in length, and are reverse compliments of the **GATAA** motif.

To match the motifs in the promoter, the following steps must be completed:

1.  Retrieve binding motif in PFM form of the transcription factor
2.  Retrieve the promoter region for the target sequences
3.  Identify the matches of the binding motif in the genes' promoter regions

They used three search motifs: one DAL80 and two GAT1. These motifs must be transformed so they can be matches using the `matchPWM` function. As we saw above, `MotifDb` returns as PFM with columns adding to 1, but `matchPWM` requires a PCM with all integer values. The frequency matrix can be transformed into a count matrix by scaling by a factor of 100 (i.e. converting from decimals to a percent out of 100).

```{r}
pfm.dal80.scertf <- query(MotifDb, "dal80")[[6]]
pcm.dal80.scertf <- round(100 * pfm.dal80.scertf)

pfm.gat1.jaspar <- query(MotifDb, "gat1")[[5]]
pcm.gat1.jaspar <- round(100 * pfm.gat1.jaspar)

pfm.gat1.scertf <- query(MotifDb, "gat1")[[6]]
pcm.gat1.scertf <- round(100 * pfm.gat1.scertf)
```

![](images/paste-491090A1.png){width="406"}

Create a list of the seven genes from the DAL80 co-regulated subnetwork (displayed above - taken from [Bioconductor Vignette - generegulation](https://www.bioconductor.org/packages/release/workflows/vignettes/generegulation/inst/doc/generegulation.html#network)). Lookup their systematic names, which will be needed for the `transcriptsBy` function.

```{r}
genes <- c("DAL1", "DAL2", "DAL4", "DAL5", "DAL7", "DAL80", "GAP1")
orfs <- as.character(mget(genes, org.Sc.sgdCOMMON2ORF))
```

This step creates a GRangesList, which is a container for storing a collection of GRanges objects - which are containers for storing genomic locations and any annotations associated with the region. In other words, this step creates a collection of the gene names and the "start location (chromosome and base pair) for every known transcript for each gene".

```{r}
grl <- transcriptsBy(TxDb.Scerevisiae.UCSC.sacCer3.sgdGene, by="gene") [orfs]
```

With this information, `GenomicFeatures::getPromoterSeq` calculates and returns the DNA sequence of the promoter:

```{r}
promoter.seqs <- getPromoterSeq(grl, Scerevisiae, upstream=1000,
                                downstream=0)
```

We will next search for a match of the motif to the first of these sequences, the promoter for DAL1. Note that here, and below, we use a 90% \"min.score\" when we call matchPWM. This high minimum match score seems reasonable given the relative absence of variability in DAL80\'s PFM:

```{r}
pfm.dal80.scertf
print (class(promoter.seqs))
```

The **GATAA** pattern is a very strong signal in this motif.

Note that some restructuring is needed for us to use the results of **getPromoterSeqs** as an argument to **matchPWM**. We call the **getPromoterSeq** method with a GRangesList, which contains a unique set of genomic ranges, representing transcript coordinates, for each of several genes. The corresponding result is a **DNAStringSetList** in which there is one DNAStringSet (essentially a list of DNAStrings) for each gene in the input list. Both of these variables are therefore lists of lists, in which the outer list is named with genes, and the inner lists are per-transcript coordinates or DNA strings.

Since we need DNA strings without that overarching by-gene-name structure, we call **unlist** to strip off that structure, leaving us with the desired DNAStringSet:

```{r}
promoter.seqs <- unlist(promoter.seqs)
print (class(promoter.seqs))
```

Once we have the correct format of the sequences, we can then see the matches of the motifs to the sequences.

```{r}
matchPWM(pcm.dal80.scertf, promoter.seqs[[1]], "90%")
```

The close proximity of these two GATAA hits suggests that dimeric (similar or identical) DAL80, or some other GATAA-binding dimer, may bind DAL1.

All of the matches in the promoters of all seven genes to one binding motif may be found at once with this command:

```{r}
pwm.hits <- sapply(promoter.seqs, 
                      function(pseq) 
                         matchPWM(pcm.dal80.scertf, pseq, min.score="90%"))
```

And we can summarize the motif hits for each of the three motifs (dal80.scertf, gat1.jaspar, gat1.scertf) by creating a data.frame of counts, by gene and motif. First, determine the hits:

```{r}
dal80.scertf.hits <- sapply(promoter.seqs, function(pseq) 
                            matchPWM(pcm.dal80.scertf, pseq, min.score="90%"))
gat1.scertf.hits  <- sapply(promoter.seqs, function(pseq) 
                            matchPWM(pcm.gat1.scertf, pseq, min.score="90%"))
gat1.jaspar.hits  <- sapply(promoter.seqs, function(pseq) 
                            matchPWM(pcm.gat1.jaspar, pseq, min.score="90%"))
```

Now count their lengths:

```{r}
dal80.scertf <- sapply(dal80.scertf.hits, length)
gat1.jaspar  <- sapply(gat1.jaspar.hits,  length)
gat1.scertf  <- sapply(gat1.scertf.hits,  length)
```

Finally, create a data.frame from this information:

```{r}
tbl.gata     <- data.frame(gene=genes, dal80.scertf, gat1.jaspar, gat1.scertf)
tbl.gata
```

These values indicate the number of occurrences of the motif in each promoter sequence. It is pretty evident that the dal80.scertf motif has more hits than the other two, but why is that? Using the pcm tables which indicate the frequency of the bases (rows) at each position (columns), we can take the number of columns to find the length of each motif.

```{r}
ncol(pcm.dal80.scertf)
ncol(pcm.gat1.jaspar)
ncol(pcm.gat1.scertf)
```

As we can see, the dal80.scertf motif only has five bases, but the gat1.jaspar motif is longer (8 bases) and more complex. The non-GATAA motif from gat1.scertf has fewer matches, but this may be due to chance, but this could be found by searching the promoters of randomly selected genes for the distribution of the motif.

### Results

### Conclusion
