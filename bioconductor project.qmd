---
title: "Bioconductor Project"
author: Hannah Hellmuth and Lindsey Ukishima
format: html
editor: visual
---

# Workflow: generegulation

Citation: Bioconductor Package Maintainer (2022). *generegulation: Finding Candidate Binding Sites for Known Transcription Factors via Sequence Matching*. R package version 1.23.0, <https://www.bioconductor.org/help/workflows/generegulation/>.

#### Finding Candidate Binding Sites for Known Transcription Factors via Sequence Matching

The binding of transcription factor proteins (TFs) to DNA promoter regions upstream of gene transcription start sites (TSSs) is one of the most important mechanisms by which gene expression, and thus many cellular processes, are controlled. Though in recent years many new kinds of data have become available for identifying transcription factor binding sites (TFBSs) \-- ChIP-seq and DNase I hypersensitivity regions among them \-- sequence matching continues to play an important role. In this workflow we demonstrate Bioconductor techniques for finding candidate TF binding sites in DNA sequence using the model organism Saccharomyces cerevisiae. The methods demonstrated here apply equally well to other organisms.

### Installing the Package

(For R version 4.2)

```{r}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("generegulation")


BiocManager::install(c("MotifDb",  "GenomicFeatures", 
           "TxDb.Scerevisiae.UCSC.sacCer3.sgdGene",
           "org.Sc.sgd.db", "BSgenome.Scerevisiae.UCSC.sacCer3",
           "motifStack", "seqLogo"))
```

```{r}
library(BiocManager)
library(generegulation)
library(MotifDb)
library(S4Vectors)
library(seqLogo)
library(motifStack)
library(Biostrings)
library(GenomicFeatures)
library(org.Sc.sgd.db)
library(BSgenome.Scerevisiae.UCSC.sacCer3)
library(TxDb.Scerevisiae.UCSC.sacCer3.sgdGene)
```

### Documentation

```{r}

browseVignettes("generegulation")
```

### Data

This workflow is looking at a set of seven widely co-expressed and highly correlated Saccharomyces cerevisiae genes: DAL1, DAL2, DAL4, DAL5, DAL7, DAL80, and GAP1. These seven genes have been found to be correlated with Nitrogen Catabolite Repression (NCR) which is the way yeast cells switch between using rich nitrogen sources and poor nitrogen sources. The data used in this workflow comes from [Allocco et al](http://www.biomedcentral.com/1471-2105/5/18), 2004, "Quantifying the relationship between co-expression, co-regulation and gene function", which looks at the gene expression across 200 conditions.

### Workflow

Packages in this workflow:

-   MotifDb

-   S4Vectors

-   seqLogo

-   motifStack

-   Biostrings

-   GenomicFeatures

-   org.Sc.sgd.db

-   BSgenome.Scerevisiae.UCSC.sacCer3

-   TxDb.Scerevisiae.UCSC.sacCer3.sgdGene

### Methods

### Results

### Conclusion

```{r}
query(MotifDb, "DAL80") 
```

```{r}
pfm.dal80.jaspar <- query(MotifDb,"DAL80")[[1]]
seqLogo(pfm.dal80.jaspar)
```

```{r}
dal1 <- "YIR027C"
chromosomal.loc <- 
  transcriptsBy(TxDb.Scerevisiae.UCSC.sacCer3.sgdGene, by="gene") [dal1]
promoter.dal1 <- 
  getPromoterSeq(chromosomal.loc, Scerevisiae, upstream=1000, downstream=0)
pcm.dal80.jaspar <- round(100 * pfm.dal80.jaspar)
matchPWM(pcm.dal80.jaspar, unlist(promoter.dal1)[[1]], "90%")
```

```{r}
dal80.jaspar <- query(MotifDb,"DAL80")[[5]]
dal80.scertf <-query(MotifDb,"DAL80")[[6
```

```{r}

```

``` {]]}
seqLogo(dal80.jaspar)
seqLogo(dal80.scertf)
```

```{r}
pfm.dal80.jaspar <- new("pfm", mat=query(MotifDb, "dal80")[[5]], 
                        name="DAL80-JASPAR")
pfm.dal80.scertf <- new("pfm", mat=query(MotifDb, "dal80")[[6]], 
                        name="DAL80-ScerTF")
plotMotifLogoStack(DNAmotifAlignment(c(pfm.dal80.scertf, pfm.dal80.jaspar)))
```

```{r}
query(MotifDb, "gat1")
```

```{r}
dal80.jaspar <- query(MotifDb,"DAL80")[[5]]
dal80.scertf <-query(MotifDb,"DAL80")[[6]]
seqLogo(dal80.jaspar)
```

```{r}
pfm.dal80.jaspar <- new("pfm", mat=tmp[[5]], 
                        name="DAL80-JASPAR")
pfm.dal80.scertf <- new("pfm", mat=query(MotifDb, "dal80")[[6]], 
                        name="DAL80-ScerTF")
plotMotifLogoStack(DNAmotifAlignment(c(pfm.dal80.scertf, pfm.dal80.jaspar)))
```

```{r}
query(MotifDb, "gat1")

pfm.gat1.jaspar = new("pfm", mat=query(MotifDb, "gat1")[[5]], 
                       name="GAT1-JASPAR")
pfm.gat1.scertf = new("pfm", mat=query(MotifDb, "gat1")[[6]], 
                       name="GAT1-ScerTF")
pfm.gat1.uniprobe = new("pfm", mat=query(MotifDb, "gat1")[[7]], 
                       name="GAT1-UniPROBE")
plotMotifLogoStack(c(pfm.gat1.uniprobe, pfm.gat1.scertf, pfm.gat1.jaspar))
```

```{r}
pfm.dal80.scertf <- query(MotifDb, "dal80")[[6]]
pcm.dal80.scertf <- round(100 * pfm.dal80.scertf)

pfm.gat1.jaspar <- query(MotifDb, "gat1")[[5]]
pcm.gat1.jaspar <- round(100 * pfm.gat1.jaspar)

pfm.gat1.scertf <- query(MotifDb, "gat1")[[6]]
pcm.gat1.scertf <- round(100 * pfm.gat1.scertf)

genes <- c("DAL1", "DAL2", "DAL4", "DAL5", "DAL7", "DAL80", "GAP1")
orfs <- as.character(mget(genes, org.Sc.sgdCOMMON2ORF))

grl <- transcriptsBy(TxDb.Scerevisiae.UCSC.sacCer3.sgdGene, by="gene") [orfs]

promoter.seqs <- getPromoterSeq(grl, Scerevisiae, upstream=1000,
                                downstream=0)
```

```{r}
pfm.dal80.scertf
print (class(promoter.seqs))

promoter.seqs <- unlist(promoter.seqs)
print (class(promoter.seqs))
```

```{r}
matchPWM(pcm.dal80.scertf, promoter.seqs[[1]], "90%")
```

```{r}
pwm.hits <- sapply(promoter.seqs, 
                      function(pseq) 
                         matchPWM(pcm.dal80.scertf, pseq, min.score="90%"))

dal80.scertf.hits <- sapply(promoter.seqs, function(pseq) 
                            matchPWM(pcm.dal80.scertf, pseq, min.score="90%"))
gat1.scertf.hits  <- sapply(promoter.seqs, function(pseq) 
                            matchPWM(pcm.gat1.scertf, pseq, min.score="90%"))
gat1.jaspar.hits  <- sapply(promoter.seqs, function(pseq) 
                            matchPWM(pcm.gat1.jaspar, pseq, min.score="90%"))

dal80.scertf <- sapply(dal80.scertf.hits, length)
gat1.jaspar  <- sapply(gat1.jaspar.hits,  length)
gat1.scertf  <- sapply(gat1.scertf.hits,  length)
```

```{r}
tbl.gata     <- data.frame(gene=genes, dal80.scertf, gat1.jaspar, gat1.scertf)
```
